package com.vm.greendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.vm.shadowsocks.domain.Log;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOG".
*/
public class LogDao extends AbstractDao<Log, Long> {

    public static final String TABLENAME = "LOG";

    /**
     * Properties of entity Log.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Mac = new Property(1, String.class, "mac", false, "MAC");
        public final static Property Ip = new Property(2, String.class, "ip", false, "IP");
        public final static Property Brand = new Property(3, String.class, "brand", false, "BRAND");
        public final static Property Model = new Property(4, String.class, "model", false, "MODEL");
        public final static Property Imei = new Property(5, String.class, "imei", false, "IMEI");
        public final static Property System_version = new Property(6, String.class, "system_version", false, "SYSTEM_VERSION");
        public final static Property Country = new Property(7, String.class, "country", false, "COUNTRY");
        public final static Property App_version = new Property(8, String.class, "app_version", false, "APP_VERSION");
        public final static Property Port = new Property(9, Integer.class, "port", false, "PORT");
        public final static Property Method = new Property(10, String.class, "method", false, "METHOD");
        public final static Property Time = new Property(11, long.class, "time", false, "TIME");
    }


    public LogDao(DaoConfig config) {
        super(config);
    }
    
    public LogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MAC\" TEXT," + // 1: mac
                "\"IP\" TEXT," + // 2: ip
                "\"BRAND\" TEXT," + // 3: brand
                "\"MODEL\" TEXT," + // 4: model
                "\"IMEI\" TEXT," + // 5: imei
                "\"SYSTEM_VERSION\" TEXT," + // 6: system_version
                "\"COUNTRY\" TEXT," + // 7: country
                "\"APP_VERSION\" TEXT," + // 8: app_version
                "\"PORT\" INTEGER," + // 9: port
                "\"METHOD\" TEXT," + // 10: method
                "\"TIME\" INTEGER NOT NULL );"); // 11: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Log entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(2, mac);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(3, ip);
        }
 
        String brand = entity.getBrand();
        if (brand != null) {
            stmt.bindString(4, brand);
        }
 
        String model = entity.getModel();
        if (model != null) {
            stmt.bindString(5, model);
        }
 
        String imei = entity.getImei();
        if (imei != null) {
            stmt.bindString(6, imei);
        }
 
        String system_version = entity.getSystem_version();
        if (system_version != null) {
            stmt.bindString(7, system_version);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(8, country);
        }
 
        String app_version = entity.getApp_version();
        if (app_version != null) {
            stmt.bindString(9, app_version);
        }
 
        Integer port = entity.getPort();
        if (port != null) {
            stmt.bindLong(10, port);
        }
 
        String method = entity.getMethod();
        if (method != null) {
            stmt.bindString(11, method);
        }
        stmt.bindLong(12, entity.getTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Log entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(2, mac);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(3, ip);
        }
 
        String brand = entity.getBrand();
        if (brand != null) {
            stmt.bindString(4, brand);
        }
 
        String model = entity.getModel();
        if (model != null) {
            stmt.bindString(5, model);
        }
 
        String imei = entity.getImei();
        if (imei != null) {
            stmt.bindString(6, imei);
        }
 
        String system_version = entity.getSystem_version();
        if (system_version != null) {
            stmt.bindString(7, system_version);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(8, country);
        }
 
        String app_version = entity.getApp_version();
        if (app_version != null) {
            stmt.bindString(9, app_version);
        }
 
        Integer port = entity.getPort();
        if (port != null) {
            stmt.bindLong(10, port);
        }
 
        String method = entity.getMethod();
        if (method != null) {
            stmt.bindString(11, method);
        }
        stmt.bindLong(12, entity.getTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Log readEntity(Cursor cursor, int offset) {
        Log entity = new Log( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mac
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ip
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // brand
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // model
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // imei
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // system_version
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // country
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // app_version
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // port
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // method
            cursor.getLong(offset + 11) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Log entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMac(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIp(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBrand(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setModel(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImei(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSystem_version(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCountry(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setApp_version(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPort(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setMethod(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTime(cursor.getLong(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Log entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Log entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Log entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
